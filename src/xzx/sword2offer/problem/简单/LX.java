package xzx.sword2offer.problem.简单;

/**
 * 题目：
 * 把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。
 * <p>
 *  
 * <p>
 * 你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。
 * <p>
 *  
 * <p>
 * 示例 1:
 * <p>
 * 输入: 1
 * 输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]
 * 示例 2:
 * <p>
 * 输入: 2
 * 输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]
 *  
 * <p>
 * 限制：
 * <p>
 * 1 <= n <= 11
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @Author: xzx
 * @Date: 2020/8/4 8:25 上午
 **/
public class LX {
    /**
     * 思路：
     * 动态规划，将n的结果拆成n-1与n相复合的结果
     * 复合过程
     * "n-1" 的每一个元素和 "1" 的每一个元素概率相乘，加在两元素和的位置，放在新的数组中，
     * 这个数组就是n个骰子所有数的概率数组
     *
     * 第一层循环的时候，i 指的是要到达 n 需要复合多少次 数组
     * 第二层循环，j 指的是遍历 n-1个数组时
     * 第三层循环，x 指的是要将数组与 "1" 复合
     *
     * @Author: xzx
     * @Date: 2020/8/4 9:10 上午
     * @Param: [n]
     * @Return: double[]
     **/
    public double[] twoSum(int n) {
//        初始数组，用来复合的
        double[] pre = {1 / 6d, 1 / 6d, 1 / 6d, 1 / 6d, 1 / 6d, 1 / 6d};
        for (int i = 2; i <= n; i++) {
            double[] num = new double[i * 5 + 1];
//            遍历 "n-1"
            for (int j = 0; j < pre.length; j++) {
//                遍历 "1"
                for (int x = 0; x < 6; x++) {
                    num[j+x]+=pre[j]*(1/6d);
                }
            }
//            把复合结果替换原pre
            pre=num;
        }
        return pre;
    }
}
